name: CMake (Windows, msys2)

on:
  workflow_dispatch:
  push:
    paths:
      - src/**
      - cmake/**
      - "**/CMakeLists.txt"
      - "CMakePresets.json"
      - .github/workflows/cmake_windows_msys2.yml
      - vcpkg.json
      - "!**/Makefile*"

  pull_request:
    paths:
      - src/**
      - cmake/**
      - "**/CMakeLists.txt"
      - "CMakePresets.json"
      - .github/workflows/cmake_windows_msys2.yml
      - vcpkg.json
      - "!**/Makefile*"

jobs:
# ────────────────────────────────────────────────────────────────
# 1️⃣  MATRIX BUILD (unchanged)
# ────────────────────────────────────────────────────────────────
  msys2:
    name: "${{ matrix.build.name }}, ${{ matrix.dynarec.name }}, ${{ matrix.environment.msystem }}"
    runs-on: ${{ matrix.environment.runner }}

    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory

    defaults:
      run:
        shell: msys2 {0}

    strategy:
      fail-fast: true
      matrix:
        build:
          - { name: Dev Debug, preset: dev_debug, slug: -Dev-Debug }
          - { name: Dev,       preset: development, slug: -Dev }
        dynarec:
          - { name: ODR, new: off          }           # old dynarec
          - { name: NDR, new: on,  slug: -NDR }        # new dynarec
        environment:
          - { msystem: MINGW64,    toolchain: ./cmake/flags-gcc-x86_64.cmake, slug: "-64",    runner: windows-2022 }
          - { msystem: CLANGARM64, toolchain: ./cmake/flags-gcc-aarch64.cmake, slug: -arm64, runner: windows-11-arm }
        exclude:
          - dynarec:   { new: off }
            environment: { msystem: CLANGARM64 }       # ODR unavailable on ARM

    steps:
      - uses: msys2/setup-msys2@v2
        name: Prepare MSYS2 environment
        with:
          release: true
          update: true
          msystem: ${{ matrix.environment.msystem }}
          pacboy: >-
            ninja:p cmake:p gcc:p pkgconf:p freetype:p SDL2:p zlib:p libpng:p
            openal:p rtmidi:p libslirp:p fluidsynth:p libserialport:p qt5-static:p
            vulkan-headers:p openmp:p

      - uses: actions/checkout@v4
        name: Checkout repository
        with: { fetch-depth: 0 }

      - name: Configure CMake
        run: >
          cmake -G Ninja -S . -B build --preset ${{ matrix.build.preset }}
          --toolchain ${{ matrix.environment.toolchain }}
          -D NEW_DYNAREC=${{ matrix.dynarec.new }}
          -D CMAKE_INSTALL_PREFIX=./build/artifacts

      - name: Build
        run: cmake --build build

      - name: Generate package
        run: cmake --install build

      - uses: actions/upload-artifact@v4
        name: Upload artifact
        with:
          name: 86Box${{ matrix.dynarec.slug }}${{ matrix.build.slug }}-Windows${{ matrix.environment.slug }}-gha${{ github.run_number }}
          path: build/artifacts/**

# ────────────────────────────────────────────────────────────────
# 2️⃣  RELEASE JOB  – zips each artifact, then uploads
# ────────────────────────────────────────────────────────────────
  release:
    name: Publish Windows Release
    needs: msys2
    runs-on: ubuntu-latest

    # Run on manual dispatch or any push (skip only on PRs)
    #if: github.event_name != 'pull_request'

    steps:
      - uses: actions/checkout@v4
        name: Reattach git context

      - uses: actions/download-artifact@v4
        name: Download all artifacts
        with:
          path: dist            # dist/ARTIFACT_NAME/…

      - name: Show gathered files
        run: |
          cd /home/runner/work/86Box/86Box/dist/
          ls -lah

      # ─── build a tag name ───────────────────────────
      - id: vars
        name: Decide tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=autobuild-${GITHUB_RUN_NUMBER}" >> "$GITHUB_OUTPUT"
          fi

      # ─── create the release shell ───────────────────
      - uses: actions/create-release@v1
        id: create
        name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:      ${{ steps.vars.outputs.tag }}
          release_name: "Windows nightly – ${{ steps.vars.outputs.tag }}"
          draft: false
          prerelease: false

      # ─── install zip + gh cli ───────────────────────
      - name: Install zip & gh
        run: |
          sudo apt-get update -y
          sudo apt-get install -y zip gh

      # ─── zip each artifact dir and upload ───────────
      - name: Zip and upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd /home/runner/work/86Box/86Box/dist/
          for dir in */ ; do
            dir="${dir%/}"
            zip -r "${dir}.zip" "$dir"
            echo "Uploading ${dir}.zip"
            gh release upload "${{ steps.vars.outputs.tag }}" "${dir}.zip" --clobber
          done
