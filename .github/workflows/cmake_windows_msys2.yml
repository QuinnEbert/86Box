name: CMake (Windows, msys2)

on:
  workflow_dispatch:
  push:

  pull_request:
    paths:
      - src/**
      - cmake/**
      - "**/CMakeLists.txt"
      - "CMakePresets.json"
      - "!.github/workflows/**"
      - .github/workflows/cmake_windows_msys2.yml
      - vcpkg.json
      - "!**/Makefile*"

jobs:
# ────────────────────────────────────────────────────────────────
# 1️⃣  MATRIX BUILD (unchanged)
# ────────────────────────────────────────────────────────────────
  msys2:

    name: "${{ matrix.build.name }}, ${{ matrix.dynarec.name }}, ${{ matrix.environment.msystem }}"
    runs-on: ${{ matrix.environment.runner }}


    defaults:
      run:
        shell: msys2 {0}

    strategy:
      fail-fast: false
      matrix:
        build:
#          - name: Regular
#            preset: regular
          - name: Debug
            preset: dev_debug
            slug: -Debug
          - name: Dev
            preset: development
            slug: -Dev
        dynarec:
          - name: ODR
            new: off
            slug: -ODR
          - name: NDR
            new: on
            slug: -NDR
        ui:
          - name: Qt GUI
            qt: on
            static: on
            slug: -Qt
            packages: >-
              qt5-base:p
              qt5-tools:p
              vulkan-headers:p
        environment:
#          - msystem: MSYS
#            toolchain: ./cmake/flags-gcc-x86_64.cmake
#            slug: "-MSYS64"
          - msystem: MINGW64
            prefix: mingw-w64-x86_64
            toolchain: ./cmake/flags-gcc-x86_64.cmake
            slug: "-64"
            runner: windows-2022
#          - msystem: CLANG64
#            prefix: mingw-w64-clang-x86_64
#            toolchain: ./cmake/llvm-win32-x86_64.cmake
#            slug: "CLANG64"
#          - msystem: UCRT64
#            prefix: mingw-w64-ucrt-x86_64
#            toolchain: ./cmake/flags-gcc-x86_64.cmake
#            slug: "UCRT64"
          - msystem: CLANGARM64
            toolchain: ./cmake/flags-gcc-aarch64.cmake
            slug: -arm64
            runner: windows-11-arm
        exclude:
          - dynarec:   { new: off }
            environment: { msystem: CLANGARM64 }       # ODR unavailable on ARM

    steps:
      - uses: msys2/setup-msys2@v2
        name: Prepare MSYS2 environment
        with:
          release: true
          update: true
          msystem: ${{ matrix.environment.msystem }}
          pacboy: >-
            ninja:p cmake:p gcc:p pkgconf:p freetype:p SDL2:p zlib:p libpng:p
            openal:p rtmidi:p libslirp:p fluidsynth:p libserialport:p qt5-static:p
            vulkan-headers:p openmp:p

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Configure CMake
        run: >
          cmake -G Ninja -S . -B build --preset ${{ matrix.build.preset }}
          --toolchain ${{ matrix.environment.toolchain }}
          -D NEW_DYNAREC=${{ matrix.dynarec.new }}
          -D CMAKE_INSTALL_PREFIX=./build/artifacts

      - name: Build
        run: cmake --build build

      - name: Generate package
        run: cmake --install build

      - name: Ensure floppysounds next to EXE
        run: |
          set -eo pipefail
          echo "Listing install root:"
          ls -lah build/artifacts || true
          # Find the primary executable produced by install
          EXE=$(find build/artifacts -maxdepth 4 -type f -iname "86Box*.exe" -print -quit)
          if [ -z "$EXE" ]; then
            echo "No EXE found under build/artifacts; skipping copy"
            exit 0
          fi
          EXEDIR=$(dirname "$EXE")
          echo "Found EXE at: $EXE"
          # If floppysounds is not already installed by CMake, copy it next to the EXE
          if [ ! -d "$EXEDIR/floppysounds" ]; then
            echo "Copying floppysounds to $EXEDIR/floppysounds"
            mkdir -p "$EXEDIR/floppysounds"
            cp -r floppysounds/* "$EXEDIR/floppysounds/" || true
          else
            echo "floppysounds already present at $EXEDIR/floppysounds"
          fi

      - name: Upload artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: 86Box${{ matrix.dynarec.slug }}${{ matrix.build.slug }}-Windows${{ matrix.environment.slug }}-gha${{ github.run_number }}
          path: build/artifacts/**
          if-no-files-found: ignore

# ────────────────────────────────────────────────────────────────
# 2️⃣  RELEASE JOB  – zips each artifact, then uploads
# ────────────────────────────────────────────────────────────────
  release:
    name: Publish Windows Release
    needs: msys2
    concurrency:
      group: release-${{ github.sha }}
      cancel-in-progress: false
    runs-on: ubuntu-latest

    # Run on manual dispatch or any push (skip only on PRs)
    #if: github.event_name != 'pull_request'

    steps:
      - uses: actions/checkout@v4
        name: Reattach git context

      - uses: actions/download-artifact@v4
        name: Download all artifacts
        with:
          path: dist            # dist/ARTIFACT_NAME/…

      - name: Show gathered files
        run: |
          cd /home/runner/work/86Box/86Box/dist/
          ls -lah

      # ─── build a tag name ───────────────────────────
      - id: vars
        name: Decide tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=autobuild-$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_OUTPUT"
          fi

      # ─── install zip + gh cli ───────────────────────
      - name: Install zip & gh
        run: |
          sudo apt-get update -y
          sudo apt-get install -y zip gh

      # ─── ensure a single release ────────────────────
      - name: Ensure GitHub release exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ steps.vars.outputs.tag }}"
          gh release view "$tag" >/dev/null 2>&1 || \
          gh release create "$tag" --title "86Box nightly – $tag" --notes ""

      # ─── zip each artifact dir and upload ───────────
      - name: Zip and upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd /home/runner/work/86Box/86Box/dist/
          for dir in */ ; do
            dir="${dir%/}"
            zip -r "${dir}.zip" "$dir"
            echo "Uploading ${dir}.zip"
            gh release upload "${{ steps.vars.outputs.tag }}" "${dir}.zip" --clobber
          done
