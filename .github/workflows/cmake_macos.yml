name: CMake (macos)

on:

  workflow_dispatch:
  push:
    paths:
      - src/**
      - cmake/**
      - "**/CMakeLists.txt"
      - "CMakePresets.json"
      - .github/workflows/cmake_macos.yml
      - vcpkg.json
      - "!**/Makefile*"

  pull_request:
    paths:
      - src/**
      - cmake/**
      - "**/CMakeLists.txt"
      - "CMakePresets.json"
      - .github/workflows/**
      - .github/workflows/cmake_macos.yml
      - vcpkg.json
      - "!**/Makefile*"

jobs:

  macos13-x86_64:
    name: "${{ matrix.ui.name }}, ${{ matrix.build.name }}, ${{ matrix.dynarec.name }}, x86_64"

    runs-on: macos-13

    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed

    strategy:
      fail-fast: true
      matrix:
        build:
#          - name: Regular
#            preset: regular
          - name: Debug
            preset: dev_debug
            slug: -Debug
          - name: Dev
            preset: development
            slug: -Dev
        dynarec:
          - name: ODR
            new: off
            slug: -ODR
          - name: NDR
            new: on
            slug: -NDR
        ui:
          - name: SDL GUI
            qt: off
            static: on
          - name: Qt GUI
            qt: on
            slug: -Qt
            packages: >-
              qt@5

    steps:
      - name: Install dependencies
        run: >-
          brew install
          ninja
          sdl2
          rtmidi
          openal-soft
          fluidsynth
          libslirp
          vde
          libserialport
          ${{ matrix.ui.packages }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v3

      - name: Configure CMake
        run: >-
          cmake -G Ninja -S . -B build --preset ${{ matrix.build.preset }}
          --toolchain ./cmake/flags-gcc-x86_64.cmake
          -D NEW_DYNAREC=${{ matrix.dynarec.new }}
          -D CMAKE_INSTALL_PREFIX=./build/artifacts
          -D QT=${{ matrix.ui.qt }}
          -D Qt5_ROOT=$(brew --prefix qt@5)
          -D Qt5LinguistTools_ROOT=$(brew --prefix qt@5)
          -D OpenAL_ROOT=$(brew --prefix openal-soft)
          -D LIBSERIALPORT_ROOT=$(brew --prefix libserialport)

      - name: Build
        run: |
          build-wrapper-macosx-x86 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build

      - name: Run sonar-scanner
        if: 0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

      - name: Generate package
        run: |
          cmake --install build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: '86Box${{ matrix.ui.slug }}${{ matrix.dynarec.slug }}${{ matrix.build.slug }}-macOS-x86_64-gha${{ github.run_number }}'
          path: build/artifacts/**

  macos14-arm64:
    name: "${{ matrix.ui.name }}, ${{ matrix.build.name }}, ${{ matrix.dynarec.name }}, arm64"

    runs-on: macos-14

#    env:
#      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed

    strategy:
      fail-fast: true
      matrix:
        build:
#          - name: Regular
#            preset: regular
          - name: Debug
            preset: dev_debug
            slug: -Debug
          - name: Dev
            preset: development
            slug: -Dev
        dynarec:
#          - name: ODR
#            new: off
#            slug: -ODR
          - name: NDR
            new: on
            slug: -NDR
        ui:
          - name: SDL GUI
            qt: off
            static: on
          - name: Qt GUI
            qt: on
            slug: -Qt
            packages: >-
              qt@5

    steps:
      - name: Install dependencies
        run: >-
          brew install
          ninja
          sdl2
          rtmidi
          openal-soft
          fluidsynth
          libslirp
          libserialport
          ${{ matrix.ui.packages }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

#      - name: Install sonar-scanner and build-wrapper
#        uses: SonarSource/sonarcloud-github-c-cpp@v3

      - name: Configure CMake
        run: >-
          cmake -G Ninja -S . -B build --preset ${{ matrix.build.preset }}
          --toolchain ./cmake/llvm-macos-aarch64.cmake
          -D NEW_DYNAREC=${{ matrix.dynarec.new }}
          -D CMAKE_INSTALL_PREFIX=./build/artifacts
          -D QT=${{ matrix.ui.qt }}
          -D Qt5_ROOT=$(brew --prefix qt@5)
          -D Qt5LinguistTools_ROOT=$(brew --prefix qt@5)
          -D OpenAL_ROOT=$(brew --prefix openal-soft)
          -D LIBSERIALPORT_ROOT=$(brew --prefix libserialport)

      - name: Build
        run: |
          cmake --build build

#      - name: Run sonar-scanner
#        if: 0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: |
#          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

      - name: Generate package
        run: |
          cmake --install build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: '86Box${{ matrix.ui.slug }}${{ matrix.dynarec.slug }}${{ matrix.build.slug }}-macOS-arm64-gha${{ github.run_number }}'
          path: build/artifacts/**

# ────────────────────────────────────────────────────────────────
# 2️⃣  RELEASE JOB  – zips each artifact, then uploads
# ────────────────────────────────────────────────────────────────
  release:
    name: Publish macOS Release
    needs: [macos13-x86_64, macos14-arm64]
    runs-on: ubuntu-latest

    # Run on manual dispatch or any push (skip only on PRs)
    #if: github.event_name != 'pull_request'

    steps:
      - uses: actions/checkout@v4
        name: Reattach git context

      - uses: actions/download-artifact@v4
        name: Download all artifacts
        with:
          path: dist            # dist/ARTIFACT_NAME/…

      - name: Show gathered files
        run: |
          cd /home/runner/work/86Box/86Box/dist/
          ls -lah

      # ─── build a tag name ───────────────────────────
      - id: vars
        name: Decide tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=autobuild-${GITHUB_RUN_NUMBER}" >> "$GITHUB_OUTPUT"
          fi

      # ─── create the release shell ───────────────────
      - uses: actions/create-release@v1
        id: create
        name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:      ${{ steps.vars.outputs.tag }}
          release_name: "macOS nightly – ${{ steps.vars.outputs.tag }}"
          draft: false
          prerelease: false

      # ─── install zip + gh cli ───────────────────────
      - name: Install zip & gh
        run: |
          sudo apt-get update -y
          sudo apt-get install -y zip gh

      # ─── zip each artifact dir and upload ───────────
      - name: Zip and upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd /home/runner/work/86Box/86Box/dist/
          for dir in */ ; do
            dir="${dir%/}"
            zip -r "${dir}.zip" "$dir"
            echo "Uploading ${dir}.zip"
            gh release upload "${{ steps.vars.outputs.tag }}" "${dir}.zip" --clobber
          done
