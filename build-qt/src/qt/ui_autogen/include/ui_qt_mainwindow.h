/********************************************************************************
** Form generated from reading UI file 'qt_mainwindow.ui'
**
** Created by: Qt User Interface Compiler version 6.9.2
**
** WARNING! All changes made in this file will be lost when recompiling UI file!
********************************************************************************/

#ifndef UI_QT_MAINWINDOW_H
#define UI_QT_MAINWINDOW_H

#include <QtCore/QVariant>
#include <QtGui/QAction>
#include <QtWidgets/QApplication>
#include <QtWidgets/QMainWindow>
#include <QtWidgets/QMenu>
#include <QtWidgets/QMenuBar>
#include <QtWidgets/QStatusBar>
#include <QtWidgets/QToolBar>
#include <QtWidgets/QVBoxLayout>
#include <QtWidgets/QWidget>
#include "qt_rendererstack.hpp"

QT_BEGIN_NAMESPACE

class Ui_MainWindow
{
public:
    QAction *actionUpdate_mouse_every_CPU_frame;
    QAction *actionAuto_pause;
    QAction *actionKeyboard_requires_capture;
    QAction *actionRight_CTRL_is_left_ALT;
    QAction *actionHard_Reset;
    QAction *actionCtrl_Alt_Del;
    QAction *actionCtrl_Alt_Esc;
    QAction *actionPause;
    QAction *actionTurbo_mode;
    QAction *actionSlow_Turbo_Off;
    QAction *actionSlow_Turbo_1_cycle;
    QAction *actionSlow_Turbo_2_cycles;
    QAction *actionSlow_Turbo_3_cycles;
    QAction *actionSlow_Turbo_4_cycles;
    QAction *actionVirtualized_CPU;
    QAction *actionExit;
    QAction *actionTurbo_Batch_Auto;
    QAction *actionTurbo_Batch_8ms;
    QAction *actionTurbo_Batch_16ms;
    QAction *actionTurbo_Batch_32ms;
    QAction *actionTurbo_Batch_64ms;
    QAction *actionTurbo_Batch_Unlimited;
    QAction *actionSettings;
    QAction *actionFullscreen;
    QAction *actionSoftware_Renderer;
    QAction *actionHide_status_bar;
    QAction *actionResizable_window;
    QAction *actionRemember_size_and_position;
    QAction *actionSpecify_dimensions;
    QAction *actionForce_4_3_display_ratio;
    QAction *actionHiDPI_scaling;
    QAction *actionCGA_PCjr_Tandy_EGA_S_VGA_overscan;
    QAction *actionChange_contrast_for_monochrome_display;
    QAction *action0_5x;
    QAction *action1x;
    QAction *action1_5x;
    QAction *action2x;
    QAction *action3x;
    QAction *action4x;
    QAction *action5x;
    QAction *action6x;
    QAction *action7x;
    QAction *action8x;
    QAction *actionNearest;
    QAction *actionLinear;
    QAction *actionFullScreen_stretch;
    QAction *actionFullScreen_43;
    QAction *actionFullScreen_keepRatio;
    QAction *actionFullScreen_int;
    QAction *actionFullScreen_int43;
    QAction *actionInverted_VGA_monitor;
    QAction *actionRGB_Color;
    QAction *actionRGB_Grayscale;
    QAction *actionAmber_monitor;
    QAction *actionGreen_monitor;
    QAction *actionWhite_monitor;
    QAction *actionBT601_NTSC_PAL;
    QAction *actionBT709_HDTV;
    QAction *actionAverage;
    QAction *actionAbout_Qt;
    QAction *actionAbout_86Box;
    QAction *actionDocumentation;
    QAction *actionUpdate_status_bar_icons;
    QAction *actionTake_screenshot;
    QAction *actionMute_Unmute;
    QAction *actionSound_gain;
    QAction *actionOpenGL_3_0_Core;
    QAction *actionPreferences;
    QAction *actionEnable_Discord_integration;
    QAction *actionHide_tool_bar;
    QAction *actionACPI_Shutdown;
    QAction *actionBegin_trace;
    QAction *actionEnd_trace;
    QAction *actionRenderer_options;
    QAction *actionVulkan;
    QAction *actionMCA_devices;
    QAction *actionShow_non_primary_monitors;
    QAction *actionVNC;
    QAction *actionOpen_printer_tray;
    QAction *actionOpen_screenshots_folder;
    QAction *actionApply_fullscreen_stretch_mode_when_maximized;
    QAction *actionCursor_Puck;
    QAction *actionPen;
    QAction *actionCGA_composite_settings;
    QAction *action_Full_screen_stretch_gl;
    QAction *action_4_3_gl;
    QAction *action_Square_pixels_keep_ratio_gl;
    QAction *action_Integer_scale_gl;
    QAction *action4_3_Integer_scale_gl;
    QAction *action_1x;
    QAction *action_0_5x_2;
    QAction *action_1x_2;
    QAction *action1_5x_2;
    QAction *action_2x_2;
    QAction *action_3x_2;
    QAction *action_4x_2;
    QAction *action_5x_2;
    QAction *action_6x_2;
    QAction *action_7x_2;
    QAction *action_8x_2;
    QWidget *centralwidget;
    QVBoxLayout *verticalLayout;
    RendererStack *stackedWidget;
    QMenuBar *menubar;
    QMenu *menuAction;
    QMenu *menuTablet_tool;
    QMenu *menuSlow_turbo;
    QMenu *menuTurbo_batch;
    QMenu *menuTools;
    QMenu *menuSound;
    QMenu *menuView;
    QMenu *menuRenderer;
    QMenu *menuWindow_scale_factor;
    QMenu *menuFilter_method;
    QMenu *menuFullscreen_stretch_mode;
    QMenu *menuEGA_S_VGA_settings;
    QMenu *menuVGA_screen_type;
    QMenu *menuGrayscale_conversion_type;
    QMenu *menuOpenGL_input_stretch_mode;
    QMenu *menuOpenGL_input_scale;
    QMenu *menuMedia;
    QMenu *menuAbout;
    QStatusBar *statusbar;
    QToolBar *toolBar;

    void setupUi(QMainWindow *MainWindow)
    {
        if (MainWindow->objectName().isEmpty())
            MainWindow->setObjectName("MainWindow");
        MainWindow->resize(724, 427);
        actionUpdate_mouse_every_CPU_frame = new QAction(MainWindow);
        actionUpdate_mouse_every_CPU_frame->setObjectName("actionUpdate_mouse_every_CPU_frame");
        actionUpdate_mouse_every_CPU_frame->setCheckable(true);
        actionAuto_pause = new QAction(MainWindow);
        actionAuto_pause->setObjectName("actionAuto_pause");
        actionAuto_pause->setCheckable(true);
        actionKeyboard_requires_capture = new QAction(MainWindow);
        actionKeyboard_requires_capture->setObjectName("actionKeyboard_requires_capture");
        actionKeyboard_requires_capture->setCheckable(true);
        actionRight_CTRL_is_left_ALT = new QAction(MainWindow);
        actionRight_CTRL_is_left_ALT->setObjectName("actionRight_CTRL_is_left_ALT");
        actionRight_CTRL_is_left_ALT->setCheckable(true);
        actionHard_Reset = new QAction(MainWindow);
        actionHard_Reset->setObjectName("actionHard_Reset");
        QIcon icon;
        icon.addFile(QString::fromUtf8(":/menuicons/qt/icons/hard_reset.ico"), QSize(), QIcon::Mode::Normal, QIcon::State::Off);
        actionHard_Reset->setIcon(icon);
        actionHard_Reset->setIconVisibleInMenu(false);
        actionCtrl_Alt_Del = new QAction(MainWindow);
        actionCtrl_Alt_Del->setObjectName("actionCtrl_Alt_Del");
        QIcon icon1;
        icon1.addFile(QString::fromUtf8(":/menuicons/qt/icons/send_cad.ico"), QSize(), QIcon::Mode::Normal, QIcon::State::Off);
        actionCtrl_Alt_Del->setIcon(icon1);
        actionCtrl_Alt_Del->setIconVisibleInMenu(false);
        actionCtrl_Alt_Del->setShortcutVisibleInContextMenu(false);
        actionCtrl_Alt_Esc = new QAction(MainWindow);
        actionCtrl_Alt_Esc->setObjectName("actionCtrl_Alt_Esc");
        QIcon icon2;
        icon2.addFile(QString::fromUtf8(":/menuicons/qt/icons/send_cae.ico"), QSize(), QIcon::Mode::Normal, QIcon::State::Off);
        actionCtrl_Alt_Esc->setIcon(icon2);
        actionCtrl_Alt_Esc->setIconVisibleInMenu(false);
        actionPause = new QAction(MainWindow);
        actionPause->setObjectName("actionPause");
        QIcon icon3;
        icon3.addFile(QString::fromUtf8(":/menuicons/qt/icons/pause.ico"), QSize(), QIcon::Mode::Normal, QIcon::State::Off);
        actionPause->setIcon(icon3);
        actionPause->setIconVisibleInMenu(false);
        actionTurbo_mode = new QAction(MainWindow);
        actionTurbo_mode->setObjectName("actionTurbo_mode");
        actionTurbo_mode->setCheckable(true);
        actionSlow_Turbo_Off = new QAction(MainWindow);
        actionSlow_Turbo_Off->setObjectName("actionSlow_Turbo_Off");
        actionSlow_Turbo_Off->setCheckable(true);
        actionSlow_Turbo_1_cycle = new QAction(MainWindow);
        actionSlow_Turbo_1_cycle->setObjectName("actionSlow_Turbo_1_cycle");
        actionSlow_Turbo_1_cycle->setCheckable(true);
        actionSlow_Turbo_2_cycles = new QAction(MainWindow);
        actionSlow_Turbo_2_cycles->setObjectName("actionSlow_Turbo_2_cycles");
        actionSlow_Turbo_2_cycles->setCheckable(true);
        actionSlow_Turbo_3_cycles = new QAction(MainWindow);
        actionSlow_Turbo_3_cycles->setObjectName("actionSlow_Turbo_3_cycles");
        actionSlow_Turbo_3_cycles->setCheckable(true);
        actionSlow_Turbo_4_cycles = new QAction(MainWindow);
        actionSlow_Turbo_4_cycles->setObjectName("actionSlow_Turbo_4_cycles");
        actionSlow_Turbo_4_cycles->setCheckable(true);
        actionVirtualized_CPU = new QAction(MainWindow);
        actionVirtualized_CPU->setObjectName("actionVirtualized_CPU");
        actionVirtualized_CPU->setCheckable(true);
        actionExit = new QAction(MainWindow);
        actionExit->setObjectName("actionExit");
        actionExit->setMenuRole(QAction::MenuRole::QuitRole);
        actionTurbo_Batch_Auto = new QAction(MainWindow);
        actionTurbo_Batch_Auto->setObjectName("actionTurbo_Batch_Auto");
        actionTurbo_Batch_Auto->setCheckable(true);
        actionTurbo_Batch_8ms = new QAction(MainWindow);
        actionTurbo_Batch_8ms->setObjectName("actionTurbo_Batch_8ms");
        actionTurbo_Batch_8ms->setCheckable(true);
        actionTurbo_Batch_16ms = new QAction(MainWindow);
        actionTurbo_Batch_16ms->setObjectName("actionTurbo_Batch_16ms");
        actionTurbo_Batch_16ms->setCheckable(true);
        actionTurbo_Batch_32ms = new QAction(MainWindow);
        actionTurbo_Batch_32ms->setObjectName("actionTurbo_Batch_32ms");
        actionTurbo_Batch_32ms->setCheckable(true);
        actionTurbo_Batch_64ms = new QAction(MainWindow);
        actionTurbo_Batch_64ms->setObjectName("actionTurbo_Batch_64ms");
        actionTurbo_Batch_64ms->setCheckable(true);
        actionTurbo_Batch_Unlimited = new QAction(MainWindow);
        actionTurbo_Batch_Unlimited->setObjectName("actionTurbo_Batch_Unlimited");
        actionTurbo_Batch_Unlimited->setCheckable(true);
        actionSettings = new QAction(MainWindow);
        actionSettings->setObjectName("actionSettings");
        QIcon icon4;
        icon4.addFile(QString::fromUtf8(":/menuicons/qt/icons/settings.ico"), QSize(), QIcon::Mode::Normal, QIcon::State::Off);
        actionSettings->setIcon(icon4);
        actionSettings->setMenuRole(QAction::MenuRole::NoRole);
        actionSettings->setIconVisibleInMenu(false);
        actionFullscreen = new QAction(MainWindow);
        actionFullscreen->setObjectName("actionFullscreen");
        actionSoftware_Renderer = new QAction(MainWindow);
        actionSoftware_Renderer->setObjectName("actionSoftware_Renderer");
        actionSoftware_Renderer->setCheckable(true);
        actionSoftware_Renderer->setProperty("vid_api", QVariant(0));
        actionHide_status_bar = new QAction(MainWindow);
        actionHide_status_bar->setObjectName("actionHide_status_bar");
        actionHide_status_bar->setCheckable(true);
        actionResizable_window = new QAction(MainWindow);
        actionResizable_window->setObjectName("actionResizable_window");
        actionResizable_window->setCheckable(true);
        actionRemember_size_and_position = new QAction(MainWindow);
        actionRemember_size_and_position->setObjectName("actionRemember_size_and_position");
        actionRemember_size_and_position->setCheckable(true);
        actionSpecify_dimensions = new QAction(MainWindow);
        actionSpecify_dimensions->setObjectName("actionSpecify_dimensions");
        actionForce_4_3_display_ratio = new QAction(MainWindow);
        actionForce_4_3_display_ratio->setObjectName("actionForce_4_3_display_ratio");
        actionForce_4_3_display_ratio->setCheckable(true);
        actionHiDPI_scaling = new QAction(MainWindow);
        actionHiDPI_scaling->setObjectName("actionHiDPI_scaling");
        actionHiDPI_scaling->setCheckable(true);
        actionCGA_PCjr_Tandy_EGA_S_VGA_overscan = new QAction(MainWindow);
        actionCGA_PCjr_Tandy_EGA_S_VGA_overscan->setObjectName("actionCGA_PCjr_Tandy_EGA_S_VGA_overscan");
        actionCGA_PCjr_Tandy_EGA_S_VGA_overscan->setCheckable(true);
        actionChange_contrast_for_monochrome_display = new QAction(MainWindow);
        actionChange_contrast_for_monochrome_display->setObjectName("actionChange_contrast_for_monochrome_display");
        actionChange_contrast_for_monochrome_display->setCheckable(true);
        action0_5x = new QAction(MainWindow);
        action0_5x->setObjectName("action0_5x");
        action0_5x->setCheckable(true);
        action1x = new QAction(MainWindow);
        action1x->setObjectName("action1x");
        action1x->setCheckable(true);
        action1_5x = new QAction(MainWindow);
        action1_5x->setObjectName("action1_5x");
        action1_5x->setCheckable(true);
        action2x = new QAction(MainWindow);
        action2x->setObjectName("action2x");
        action2x->setCheckable(true);
        action3x = new QAction(MainWindow);
        action3x->setObjectName("action3x");
        action3x->setCheckable(true);
        action4x = new QAction(MainWindow);
        action4x->setObjectName("action4x");
        action4x->setCheckable(true);
        action5x = new QAction(MainWindow);
        action5x->setObjectName("action5x");
        action5x->setCheckable(true);
        action6x = new QAction(MainWindow);
        action6x->setObjectName("action6x");
        action6x->setCheckable(true);
        action7x = new QAction(MainWindow);
        action7x->setObjectName("action7x");
        action7x->setCheckable(true);
        action8x = new QAction(MainWindow);
        action8x->setObjectName("action8x");
        action8x->setCheckable(true);
        actionNearest = new QAction(MainWindow);
        actionNearest->setObjectName("actionNearest");
        actionNearest->setCheckable(true);
        actionLinear = new QAction(MainWindow);
        actionLinear->setObjectName("actionLinear");
        actionLinear->setCheckable(true);
        actionFullScreen_stretch = new QAction(MainWindow);
        actionFullScreen_stretch->setObjectName("actionFullScreen_stretch");
        actionFullScreen_stretch->setCheckable(true);
        actionFullScreen_43 = new QAction(MainWindow);
        actionFullScreen_43->setObjectName("actionFullScreen_43");
        actionFullScreen_43->setCheckable(true);
        actionFullScreen_keepRatio = new QAction(MainWindow);
        actionFullScreen_keepRatio->setObjectName("actionFullScreen_keepRatio");
        actionFullScreen_keepRatio->setCheckable(true);
        actionFullScreen_int = new QAction(MainWindow);
        actionFullScreen_int->setObjectName("actionFullScreen_int");
        actionFullScreen_int->setCheckable(true);
        actionFullScreen_int43 = new QAction(MainWindow);
        actionFullScreen_int43->setObjectName("actionFullScreen_int43");
        actionFullScreen_int43->setCheckable(true);
        actionInverted_VGA_monitor = new QAction(MainWindow);
        actionInverted_VGA_monitor->setObjectName("actionInverted_VGA_monitor");
        actionInverted_VGA_monitor->setCheckable(true);
        actionRGB_Color = new QAction(MainWindow);
        actionRGB_Color->setObjectName("actionRGB_Color");
        actionRGB_Color->setCheckable(true);
        actionRGB_Grayscale = new QAction(MainWindow);
        actionRGB_Grayscale->setObjectName("actionRGB_Grayscale");
        actionRGB_Grayscale->setCheckable(true);
        actionAmber_monitor = new QAction(MainWindow);
        actionAmber_monitor->setObjectName("actionAmber_monitor");
        actionAmber_monitor->setCheckable(true);
        actionGreen_monitor = new QAction(MainWindow);
        actionGreen_monitor->setObjectName("actionGreen_monitor");
        actionGreen_monitor->setCheckable(true);
        actionWhite_monitor = new QAction(MainWindow);
        actionWhite_monitor->setObjectName("actionWhite_monitor");
        actionWhite_monitor->setCheckable(true);
        actionBT601_NTSC_PAL = new QAction(MainWindow);
        actionBT601_NTSC_PAL->setObjectName("actionBT601_NTSC_PAL");
        actionBT601_NTSC_PAL->setCheckable(true);
        actionBT709_HDTV = new QAction(MainWindow);
        actionBT709_HDTV->setObjectName("actionBT709_HDTV");
        actionBT709_HDTV->setCheckable(true);
        actionAverage = new QAction(MainWindow);
        actionAverage->setObjectName("actionAverage");
        actionAverage->setCheckable(true);
        actionAbout_Qt = new QAction(MainWindow);
        actionAbout_Qt->setObjectName("actionAbout_Qt");
        actionAbout_Qt->setVisible(false);
        actionAbout_Qt->setMenuRole(QAction::MenuRole::AboutQtRole);
        actionAbout_86Box = new QAction(MainWindow);
        actionAbout_86Box->setObjectName("actionAbout_86Box");
        actionAbout_86Box->setMenuRole(QAction::MenuRole::AboutRole);
        actionDocumentation = new QAction(MainWindow);
        actionDocumentation->setObjectName("actionDocumentation");
        actionUpdate_status_bar_icons = new QAction(MainWindow);
        actionUpdate_status_bar_icons->setObjectName("actionUpdate_status_bar_icons");
        actionUpdate_status_bar_icons->setCheckable(true);
        actionTake_screenshot = new QAction(MainWindow);
        actionTake_screenshot->setObjectName("actionTake_screenshot");
        actionTake_screenshot->setShortcutVisibleInContextMenu(false);
        actionMute_Unmute = new QAction(MainWindow);
        actionMute_Unmute->setObjectName("actionMute_Unmute");
        actionSound_gain = new QAction(MainWindow);
        actionSound_gain->setObjectName("actionSound_gain");
        actionOpenGL_3_0_Core = new QAction(MainWindow);
        actionOpenGL_3_0_Core->setObjectName("actionOpenGL_3_0_Core");
        actionOpenGL_3_0_Core->setCheckable(true);
        actionOpenGL_3_0_Core->setProperty("vid_api", QVariant(1));
        actionPreferences = new QAction(MainWindow);
        actionPreferences->setObjectName("actionPreferences");
        actionPreferences->setMenuRole(QAction::MenuRole::PreferencesRole);
        actionEnable_Discord_integration = new QAction(MainWindow);
        actionEnable_Discord_integration->setObjectName("actionEnable_Discord_integration");
        actionEnable_Discord_integration->setCheckable(true);
        actionHide_tool_bar = new QAction(MainWindow);
        actionHide_tool_bar->setObjectName("actionHide_tool_bar");
        actionHide_tool_bar->setCheckable(true);
        actionACPI_Shutdown = new QAction(MainWindow);
        actionACPI_Shutdown->setObjectName("actionACPI_Shutdown");
        actionACPI_Shutdown->setEnabled(true);
        QIcon icon5;
        icon5.addFile(QString::fromUtf8(":/menuicons/qt/icons/acpi_shutdown.ico"), QSize(), QIcon::Mode::Normal, QIcon::State::Off);
        actionACPI_Shutdown->setIcon(icon5);
        actionACPI_Shutdown->setVisible(true);
        actionBegin_trace = new QAction(MainWindow);
        actionBegin_trace->setObjectName("actionBegin_trace");
        actionBegin_trace->setVisible(false);
        actionBegin_trace->setShortcutVisibleInContextMenu(false);
        actionEnd_trace = new QAction(MainWindow);
        actionEnd_trace->setObjectName("actionEnd_trace");
        actionEnd_trace->setVisible(false);
        actionEnd_trace->setShortcutVisibleInContextMenu(false);
        actionRenderer_options = new QAction(MainWindow);
        actionRenderer_options->setObjectName("actionRenderer_options");
        actionRenderer_options->setMenuRole(QAction::MenuRole::NoRole);
        actionVulkan = new QAction(MainWindow);
        actionVulkan->setObjectName("actionVulkan");
        actionVulkan->setCheckable(true);
        actionVulkan->setProperty("vid_api", QVariant(2));
        actionMCA_devices = new QAction(MainWindow);
        actionMCA_devices->setObjectName("actionMCA_devices");
        actionShow_non_primary_monitors = new QAction(MainWindow);
        actionShow_non_primary_monitors->setObjectName("actionShow_non_primary_monitors");
        actionShow_non_primary_monitors->setCheckable(true);
        actionVNC = new QAction(MainWindow);
        actionVNC->setObjectName("actionVNC");
        actionVNC->setCheckable(true);
        actionVNC->setProperty("vid_api", QVariant(3));
        actionOpen_printer_tray = new QAction(MainWindow);
        actionOpen_printer_tray->setObjectName("actionOpen_printer_tray");
        actionOpen_screenshots_folder = new QAction(MainWindow);
        actionOpen_screenshots_folder->setObjectName("actionOpen_screenshots_folder");
        actionApply_fullscreen_stretch_mode_when_maximized = new QAction(MainWindow);
        actionApply_fullscreen_stretch_mode_when_maximized->setObjectName("actionApply_fullscreen_stretch_mode_when_maximized");
        actionApply_fullscreen_stretch_mode_when_maximized->setCheckable(true);
        actionCursor_Puck = new QAction(MainWindow);
        actionCursor_Puck->setObjectName("actionCursor_Puck");
        actionCursor_Puck->setCheckable(true);
        actionPen = new QAction(MainWindow);
        actionPen->setObjectName("actionPen");
        actionPen->setCheckable(true);
        actionCGA_composite_settings = new QAction(MainWindow);
        actionCGA_composite_settings->setObjectName("actionCGA_composite_settings");
        action_Full_screen_stretch_gl = new QAction(MainWindow);
        action_Full_screen_stretch_gl->setObjectName("action_Full_screen_stretch_gl");
        action_Full_screen_stretch_gl->setCheckable(true);
        action_4_3_gl = new QAction(MainWindow);
        action_4_3_gl->setObjectName("action_4_3_gl");
        action_4_3_gl->setCheckable(true);
        action_Square_pixels_keep_ratio_gl = new QAction(MainWindow);
        action_Square_pixels_keep_ratio_gl->setObjectName("action_Square_pixels_keep_ratio_gl");
        action_Square_pixels_keep_ratio_gl->setCheckable(true);
        action_Integer_scale_gl = new QAction(MainWindow);
        action_Integer_scale_gl->setObjectName("action_Integer_scale_gl");
        action_Integer_scale_gl->setCheckable(true);
        action4_3_Integer_scale_gl = new QAction(MainWindow);
        action4_3_Integer_scale_gl->setObjectName("action4_3_Integer_scale_gl");
        action4_3_Integer_scale_gl->setCheckable(true);
        action_1x = new QAction(MainWindow);
        action_1x->setObjectName("action_1x");
        action_1x->setCheckable(true);
        action_0_5x_2 = new QAction(MainWindow);
        action_0_5x_2->setObjectName("action_0_5x_2");
        action_0_5x_2->setCheckable(true);
        action_1x_2 = new QAction(MainWindow);
        action_1x_2->setObjectName("action_1x_2");
        action_1x_2->setCheckable(true);
        action1_5x_2 = new QAction(MainWindow);
        action1_5x_2->setObjectName("action1_5x_2");
        action1_5x_2->setCheckable(true);
        action_2x_2 = new QAction(MainWindow);
        action_2x_2->setObjectName("action_2x_2");
        action_2x_2->setCheckable(true);
        action_3x_2 = new QAction(MainWindow);
        action_3x_2->setObjectName("action_3x_2");
        action_3x_2->setCheckable(true);
        action_4x_2 = new QAction(MainWindow);
        action_4x_2->setObjectName("action_4x_2");
        action_4x_2->setCheckable(true);
        action_5x_2 = new QAction(MainWindow);
        action_5x_2->setObjectName("action_5x_2");
        action_5x_2->setCheckable(true);
        action_6x_2 = new QAction(MainWindow);
        action_6x_2->setObjectName("action_6x_2");
        action_6x_2->setCheckable(true);
        action_7x_2 = new QAction(MainWindow);
        action_7x_2->setObjectName("action_7x_2");
        action_7x_2->setCheckable(true);
        action_8x_2 = new QAction(MainWindow);
        action_8x_2->setObjectName("action_8x_2");
        action_8x_2->setCheckable(true);
        centralwidget = new QWidget(MainWindow);
        centralwidget->setObjectName("centralwidget");
        QSizePolicy sizePolicy(QSizePolicy::Policy::Expanding, QSizePolicy::Policy::Expanding);
        sizePolicy.setHorizontalStretch(0);
        sizePolicy.setVerticalStretch(0);
        sizePolicy.setHeightForWidth(centralwidget->sizePolicy().hasHeightForWidth());
        centralwidget->setSizePolicy(sizePolicy);
        verticalLayout = new QVBoxLayout(centralwidget);
        verticalLayout->setSpacing(0);
        verticalLayout->setObjectName("verticalLayout");
        verticalLayout->setContentsMargins(0, 0, 0, 0);
        stackedWidget = new RendererStack(centralwidget);
        stackedWidget->setObjectName("stackedWidget");
        sizePolicy.setHeightForWidth(stackedWidget->sizePolicy().hasHeightForWidth());
        stackedWidget->setSizePolicy(sizePolicy);

        verticalLayout->addWidget(stackedWidget);

        MainWindow->setCentralWidget(centralwidget);
        menubar = new QMenuBar(MainWindow);
        menubar->setObjectName("menubar");
        menubar->setGeometry(QRect(0, 0, 724, 21));
        menuAction = new QMenu(menubar);
        menuAction->setObjectName("menuAction");
        menuTablet_tool = new QMenu(menuAction);
        menuTablet_tool->setObjectName("menuTablet_tool");
        menuSlow_turbo = new QMenu(menuAction);
        menuSlow_turbo->setObjectName("menuSlow_turbo");
        menuTurbo_batch = new QMenu(menuAction);
        menuTurbo_batch->setObjectName("menuTurbo_batch");
        menuTools = new QMenu(menubar);
        menuTools->setObjectName("menuTools");
        menuSound = new QMenu(menuTools);
        menuSound->setObjectName("menuSound");
        menuView = new QMenu(menubar);
        menuView->setObjectName("menuView");
        menuRenderer = new QMenu(menuView);
        menuRenderer->setObjectName("menuRenderer");
        menuWindow_scale_factor = new QMenu(menuView);
        menuWindow_scale_factor->setObjectName("menuWindow_scale_factor");
        menuFilter_method = new QMenu(menuView);
        menuFilter_method->setObjectName("menuFilter_method");
        menuFullscreen_stretch_mode = new QMenu(menuView);
        menuFullscreen_stretch_mode->setObjectName("menuFullscreen_stretch_mode");
        menuEGA_S_VGA_settings = new QMenu(menuView);
        menuEGA_S_VGA_settings->setObjectName("menuEGA_S_VGA_settings");
        menuVGA_screen_type = new QMenu(menuEGA_S_VGA_settings);
        menuVGA_screen_type->setObjectName("menuVGA_screen_type");
        menuGrayscale_conversion_type = new QMenu(menuEGA_S_VGA_settings);
        menuGrayscale_conversion_type->setObjectName("menuGrayscale_conversion_type");
        menuOpenGL_input_stretch_mode = new QMenu(menuView);
        menuOpenGL_input_stretch_mode->setObjectName("menuOpenGL_input_stretch_mode");
        menuOpenGL_input_scale = new QMenu(menuView);
        menuOpenGL_input_scale->setObjectName("menuOpenGL_input_scale");
        menuMedia = new QMenu(menubar);
        menuMedia->setObjectName("menuMedia");
        menuAbout = new QMenu(menubar);
        menuAbout->setObjectName("menuAbout");
        MainWindow->setMenuBar(menubar);
        statusbar = new QStatusBar(MainWindow);
        statusbar->setObjectName("statusbar");
        MainWindow->setStatusBar(statusbar);
        toolBar = new QToolBar(MainWindow);
        toolBar->setObjectName("toolBar");
        toolBar->setContextMenuPolicy(Qt::ContextMenuPolicy::PreventContextMenu);
        toolBar->setWindowTitle(QString::fromUtf8("toolBar"));
        toolBar->setAutoFillBackground(true);
        toolBar->setMovable(false);
        toolBar->setAllowedAreas(Qt::ToolBarArea::TopToolBarArea);
        toolBar->setIconSize(QSize(16, 16));
        toolBar->setToolButtonStyle(Qt::ToolButtonStyle::ToolButtonIconOnly);
        toolBar->setFloatable(false);
        MainWindow->addToolBar(Qt::ToolBarArea::TopToolBarArea, toolBar);

        menubar->addAction(menuAction->menuAction());
        menubar->addAction(menuView->menuAction());
        menubar->addAction(menuMedia->menuAction());
        menubar->addAction(menuTools->menuAction());
        menubar->addAction(menuAbout->menuAction());
        menuAction->addAction(actionAuto_pause);
        menuAction->addSeparator();
        menuAction->addAction(actionKeyboard_requires_capture);
        menuAction->addAction(actionRight_CTRL_is_left_ALT);
        menuAction->addSeparator();
        menuAction->addAction(actionUpdate_mouse_every_CPU_frame);
        menuAction->addSeparator();
        menuAction->addAction(actionAuto_pause);
        menuAction->addAction(actionPause);
        menuAction->addAction(actionTurbo_mode);
        menuAction->addAction(menuSlow_turbo->menuAction());
        menuAction->addAction(menuTurbo_batch->menuAction());
        menuAction->addAction(actionVirtualized_CPU);
        menuAction->addSeparator();
        menuAction->addAction(actionHard_Reset);
        menuAction->addAction(actionCtrl_Alt_Del);
        menuAction->addSeparator();
        menuAction->addAction(actionCtrl_Alt_Esc);
        menuAction->addSeparator();
        menuAction->addAction(actionExit);
        menuTablet_tool->addAction(actionPen);
        menuTablet_tool->addAction(actionCursor_Puck);
        menuSlow_turbo->addAction(actionSlow_Turbo_Off);
        menuSlow_turbo->addAction(actionSlow_Turbo_1_cycle);
        menuSlow_turbo->addAction(actionSlow_Turbo_2_cycles);
        menuSlow_turbo->addAction(actionSlow_Turbo_3_cycles);
        menuSlow_turbo->addAction(actionSlow_Turbo_4_cycles);
        menuTurbo_batch->addAction(actionTurbo_Batch_Auto);
        menuTurbo_batch->addAction(actionTurbo_Batch_8ms);
        menuTurbo_batch->addAction(actionTurbo_Batch_16ms);
        menuTurbo_batch->addAction(actionTurbo_Batch_32ms);
        menuTurbo_batch->addAction(actionTurbo_Batch_64ms);
        menuTurbo_batch->addAction(actionTurbo_Batch_Unlimited);
        menuTools->addAction(actionSettings);
        menuTools->addAction(actionUpdate_status_bar_icons);
        menuTools->addSeparator();
        menuTools->addAction(actionEnable_Discord_integration);
        menuTools->addSeparator();
        menuTools->addAction(actionTake_screenshot);
        menuTools->addAction(menuSound->menuAction());
        menuTools->addSeparator();
        menuTools->addAction(actionPreferences);
        menuTools->addSeparator();
        menuTools->addAction(actionBegin_trace);
        menuTools->addAction(actionEnd_trace);
        menuTools->addSeparator();
        menuTools->addAction(actionMCA_devices);
        menuTools->addSeparator();
        menuTools->addAction(actionOpen_printer_tray);
        menuTools->addAction(actionOpen_screenshots_folder);
        menuSound->addAction(actionMute_Unmute);
        menuSound->addSeparator();
        menuSound->addAction(actionSound_gain);
        menuView->addAction(actionHide_tool_bar);
        menuView->addAction(actionHide_status_bar);
        menuView->addSeparator();
        menuView->addAction(actionShow_non_primary_monitors);
        menuView->addAction(actionResizable_window);
        menuView->addAction(actionRemember_size_and_position);
        menuView->addSeparator();
        menuView->addAction(menuRenderer->menuAction());
        menuView->addAction(actionRenderer_options);
        menuView->addAction(menuOpenGL_input_stretch_mode->menuAction());
        menuView->addAction(menuOpenGL_input_scale->menuAction());
        menuView->addSeparator();
        menuView->addAction(actionSpecify_dimensions);
        menuView->addAction(actionForce_4_3_display_ratio);
        menuView->addAction(menuWindow_scale_factor->menuAction());
        menuView->addAction(menuFilter_method->menuAction());
        menuView->addAction(actionHiDPI_scaling);
        menuView->addSeparator();
        menuView->addAction(actionFullscreen);
        menuView->addAction(menuFullscreen_stretch_mode->menuAction());
        menuView->addAction(actionApply_fullscreen_stretch_mode_when_maximized);
        menuView->addAction(actionCGA_composite_settings);
        menuView->addAction(menuEGA_S_VGA_settings->menuAction());
        menuView->addSeparator();
        menuView->addAction(actionCGA_PCjr_Tandy_EGA_S_VGA_overscan);
        menuView->addAction(actionChange_contrast_for_monochrome_display);
        menuRenderer->addAction(actionSoftware_Renderer);
        menuRenderer->addAction(actionOpenGL_3_0_Core);
        menuRenderer->addAction(actionVulkan);
        menuRenderer->addAction(actionVNC);
        menuWindow_scale_factor->addAction(action0_5x);
        menuWindow_scale_factor->addAction(action1x);
        menuWindow_scale_factor->addAction(action1_5x);
        menuWindow_scale_factor->addAction(action2x);
        menuWindow_scale_factor->addAction(action3x);
        menuWindow_scale_factor->addAction(action4x);
        menuWindow_scale_factor->addAction(action5x);
        menuWindow_scale_factor->addAction(action6x);
        menuWindow_scale_factor->addAction(action7x);
        menuWindow_scale_factor->addAction(action8x);
        menuFilter_method->addAction(actionNearest);
        menuFilter_method->addAction(actionLinear);
        menuFullscreen_stretch_mode->addAction(actionFullScreen_stretch);
        menuFullscreen_stretch_mode->addAction(actionFullScreen_43);
        menuFullscreen_stretch_mode->addAction(actionFullScreen_keepRatio);
        menuFullscreen_stretch_mode->addAction(actionFullScreen_int);
        menuFullscreen_stretch_mode->addAction(actionFullScreen_int43);
        menuEGA_S_VGA_settings->addAction(actionInverted_VGA_monitor);
        menuEGA_S_VGA_settings->addAction(menuVGA_screen_type->menuAction());
        menuEGA_S_VGA_settings->addAction(menuGrayscale_conversion_type->menuAction());
        menuVGA_screen_type->addAction(actionRGB_Color);
        menuVGA_screen_type->addAction(actionRGB_Grayscale);
        menuVGA_screen_type->addAction(actionAmber_monitor);
        menuVGA_screen_type->addAction(actionGreen_monitor);
        menuVGA_screen_type->addAction(actionWhite_monitor);
        menuGrayscale_conversion_type->addAction(actionBT601_NTSC_PAL);
        menuGrayscale_conversion_type->addAction(actionBT709_HDTV);
        menuGrayscale_conversion_type->addAction(actionAverage);
        menuOpenGL_input_stretch_mode->addAction(action_Full_screen_stretch_gl);
        menuOpenGL_input_stretch_mode->addAction(action_4_3_gl);
        menuOpenGL_input_stretch_mode->addAction(action_Square_pixels_keep_ratio_gl);
        menuOpenGL_input_stretch_mode->addAction(action_Integer_scale_gl);
        menuOpenGL_input_stretch_mode->addAction(action4_3_Integer_scale_gl);
        menuOpenGL_input_scale->addAction(action_0_5x_2);
        menuOpenGL_input_scale->addAction(action_1x_2);
        menuOpenGL_input_scale->addAction(action1_5x_2);
        menuOpenGL_input_scale->addAction(action_2x_2);
        menuOpenGL_input_scale->addAction(action_3x_2);
        menuOpenGL_input_scale->addAction(action_4x_2);
        menuOpenGL_input_scale->addAction(action_5x_2);
        menuOpenGL_input_scale->addAction(action_6x_2);
        menuOpenGL_input_scale->addAction(action_7x_2);
        menuOpenGL_input_scale->addAction(action_8x_2);
        menuAbout->addAction(actionDocumentation);
        menuAbout->addAction(actionAbout_86Box);
        menuAbout->addAction(actionAbout_Qt);
        toolBar->addAction(actionPause);
        toolBar->addAction(actionHard_Reset);
        toolBar->addSeparator();
        toolBar->addAction(actionACPI_Shutdown);
        toolBar->addSeparator();
        toolBar->addAction(actionCtrl_Alt_Del);
        toolBar->addAction(actionCtrl_Alt_Esc);
        toolBar->addSeparator();
        toolBar->addAction(actionSettings);

        retranslateUi(MainWindow);

        QMetaObject::connectSlotsByName(MainWindow);
    } // setupUi

    void retranslateUi(QMainWindow *MainWindow)
    {
        MainWindow->setWindowTitle(QCoreApplication::translate("MainWindow", "86Box", nullptr));
        actionUpdate_mouse_every_CPU_frame->setText(QCoreApplication::translate("MainWindow", "&Update mouse every CPU frame", nullptr));
        actionAuto_pause->setText(QCoreApplication::translate("MainWindow", "&Auto-pause on focus loss", nullptr));
        actionKeyboard_requires_capture->setText(QCoreApplication::translate("MainWindow", "&Keyboard requires capture", nullptr));
        actionRight_CTRL_is_left_ALT->setText(QCoreApplication::translate("MainWindow", "&Right CTRL is left ALT", nullptr));
        actionHard_Reset->setText(QCoreApplication::translate("MainWindow", "&Hard Reset...", nullptr));
        actionCtrl_Alt_Del->setText(QCoreApplication::translate("MainWindow", "&Ctrl+Alt+Del", nullptr));
#if QT_CONFIG(tooltip)
        actionCtrl_Alt_Del->setToolTip(QCoreApplication::translate("MainWindow", "Ctrl+Alt+Del", nullptr));
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        actionCtrl_Alt_Del->setShortcut(QCoreApplication::translate("MainWindow", "Ctrl+F12", nullptr));
#endif // QT_CONFIG(shortcut)
        actionCtrl_Alt_Esc->setText(QCoreApplication::translate("MainWindow", "Ctrl+Alt+&Esc", nullptr));
        actionPause->setText(QCoreApplication::translate("MainWindow", "&Pause", nullptr));
        actionTurbo_mode->setText(QCoreApplication::translate("MainWindow", "Turbo mode", nullptr));
        actionSlow_Turbo_Off->setText(QCoreApplication::translate("MainWindow", "Off", nullptr));
        actionSlow_Turbo_1_cycle->setText(QCoreApplication::translate("MainWindow", "1 Cycle Skip", nullptr));
        actionSlow_Turbo_2_cycles->setText(QCoreApplication::translate("MainWindow", "5 Cycle Skip", nullptr));
        actionSlow_Turbo_3_cycles->setText(QCoreApplication::translate("MainWindow", "10 Cycle Skip", nullptr));
        actionSlow_Turbo_4_cycles->setText(QCoreApplication::translate("MainWindow", "25 Cycle Skip", nullptr));
        actionVirtualized_CPU->setText(QCoreApplication::translate("MainWindow", "Virtualized CPU", nullptr));
#if QT_CONFIG(tooltip)
        actionVirtualized_CPU->setToolTip(QCoreApplication::translate("MainWindow", "Loosen caching in turbo mode for performance", nullptr));
#endif // QT_CONFIG(tooltip)
        actionExit->setText(QCoreApplication::translate("MainWindow", "E&xit", nullptr));
        actionTurbo_Batch_Auto->setText(QCoreApplication::translate("MainWindow", "Auto (recommended)", nullptr));
        actionTurbo_Batch_8ms->setText(QCoreApplication::translate("MainWindow", "8 ms", nullptr));
        actionTurbo_Batch_16ms->setText(QCoreApplication::translate("MainWindow", "16 ms", nullptr));
        actionTurbo_Batch_32ms->setText(QCoreApplication::translate("MainWindow", "32 ms", nullptr));
        actionTurbo_Batch_64ms->setText(QCoreApplication::translate("MainWindow", "64 ms", nullptr));
        actionTurbo_Batch_Unlimited->setText(QCoreApplication::translate("MainWindow", "Unlimited (max speed)", nullptr));
        actionSettings->setText(QCoreApplication::translate("MainWindow", "&Settings...", nullptr));
        actionFullscreen->setText(QCoreApplication::translate("MainWindow", "&Fullscreen", nullptr));
#if QT_CONFIG(shortcut)
        actionFullscreen->setShortcut(QCoreApplication::translate("MainWindow", "Ctrl+Alt+PgUp", nullptr));
#endif // QT_CONFIG(shortcut)
        actionSoftware_Renderer->setText(QCoreApplication::translate("MainWindow", "&Qt (Software)", nullptr));
        actionHide_status_bar->setText(QCoreApplication::translate("MainWindow", "&Hide status bar", nullptr));
        actionResizable_window->setText(QCoreApplication::translate("MainWindow", "&Resizeable window", nullptr));
        actionRemember_size_and_position->setText(QCoreApplication::translate("MainWindow", "R&emember size && position", nullptr));
        actionSpecify_dimensions->setText(QCoreApplication::translate("MainWindow", "Specify &dimensions...", nullptr));
        actionForce_4_3_display_ratio->setText(QCoreApplication::translate("MainWindow", "Force &4:3 display ratio", nullptr));
        actionHiDPI_scaling->setText(QCoreApplication::translate("MainWindow", "Hi&DPI scaling", nullptr));
        actionCGA_PCjr_Tandy_EGA_S_VGA_overscan->setText(QCoreApplication::translate("MainWindow", "CGA/PCjr/Tandy/E&GA/(S)VGA overscan", nullptr));
        actionChange_contrast_for_monochrome_display->setText(QCoreApplication::translate("MainWindow", "Change contrast for &monochrome display", nullptr));
        action0_5x->setText(QCoreApplication::translate("MainWindow", "&0.5x", nullptr));
        action1x->setText(QCoreApplication::translate("MainWindow", "&1x", nullptr));
        action1_5x->setText(QCoreApplication::translate("MainWindow", "1.&5x", nullptr));
        action2x->setText(QCoreApplication::translate("MainWindow", "&2x", nullptr));
        action3x->setText(QCoreApplication::translate("MainWindow", "&3x", nullptr));
        action4x->setText(QCoreApplication::translate("MainWindow", "&4x", nullptr));
        action5x->setText(QCoreApplication::translate("MainWindow", "&5x", nullptr));
        action6x->setText(QCoreApplication::translate("MainWindow", "&6x", nullptr));
        action7x->setText(QCoreApplication::translate("MainWindow", "&7x", nullptr));
        action8x->setText(QCoreApplication::translate("MainWindow", "&8x", nullptr));
        actionNearest->setText(QCoreApplication::translate("MainWindow", "&Nearest", nullptr));
        actionLinear->setText(QCoreApplication::translate("MainWindow", "&Linear", nullptr));
        actionFullScreen_stretch->setText(QCoreApplication::translate("MainWindow", "&Full screen stretch", nullptr));
        actionFullScreen_43->setText(QCoreApplication::translate("MainWindow", "&4:3", nullptr));
        actionFullScreen_keepRatio->setText(QCoreApplication::translate("MainWindow", "&Square pixels (Keep ratio)", nullptr));
        actionFullScreen_int->setText(QCoreApplication::translate("MainWindow", "&Integer scale", nullptr));
        actionFullScreen_int43->setText(QCoreApplication::translate("MainWindow", "4:&3 Integer scale", nullptr));
        actionInverted_VGA_monitor->setText(QCoreApplication::translate("MainWindow", "&Inverted VGA monitor", nullptr));
        actionRGB_Color->setText(QCoreApplication::translate("MainWindow", "RGB &Color", nullptr));
        actionRGB_Grayscale->setText(QCoreApplication::translate("MainWindow", "&RGB Grayscale", nullptr));
        actionAmber_monitor->setText(QCoreApplication::translate("MainWindow", "&Amber monitor", nullptr));
        actionGreen_monitor->setText(QCoreApplication::translate("MainWindow", "&Green monitor", nullptr));
        actionWhite_monitor->setText(QCoreApplication::translate("MainWindow", "&White monitor", nullptr));
        actionBT601_NTSC_PAL->setText(QCoreApplication::translate("MainWindow", "BT&601 (NTSC/PAL)", nullptr));
        actionBT709_HDTV->setText(QCoreApplication::translate("MainWindow", "BT&709 (HDTV)", nullptr));
        actionAverage->setText(QCoreApplication::translate("MainWindow", "&Average", nullptr));
        actionAbout_Qt->setText(QCoreApplication::translate("MainWindow", "About &Qt", nullptr));
        actionAbout_86Box->setText(QCoreApplication::translate("MainWindow", "&About 86Box...", nullptr));
        actionDocumentation->setText(QCoreApplication::translate("MainWindow", "&Documentation...", nullptr));
        actionUpdate_status_bar_icons->setText(QCoreApplication::translate("MainWindow", "&Update status bar icons", nullptr));
        actionTake_screenshot->setText(QCoreApplication::translate("MainWindow", "Take s&creenshot", nullptr));
#if QT_CONFIG(shortcut)
        actionTake_screenshot->setShortcut(QCoreApplication::translate("MainWindow", "Ctrl+F11", nullptr));
#endif // QT_CONFIG(shortcut)
        actionMute_Unmute->setText(QCoreApplication::translate("MainWindow", "&Mute", nullptr));
        actionSound_gain->setText(QCoreApplication::translate("MainWindow", "Sound &gain...", nullptr));
        actionOpenGL_3_0_Core->setText(QCoreApplication::translate("MainWindow", "Open&GL (3.0 Core)", nullptr));
        actionPreferences->setText(QCoreApplication::translate("MainWindow", "&Preferences...", nullptr));
        actionEnable_Discord_integration->setText(QCoreApplication::translate("MainWindow", "Enable &Discord integration", nullptr));
        actionHide_tool_bar->setText(QCoreApplication::translate("MainWindow", "Hide &toolbar", nullptr));
#if QT_CONFIG(tooltip)
        actionHide_tool_bar->setToolTip(QCoreApplication::translate("MainWindow", "Hide tool bar", nullptr));
#endif // QT_CONFIG(tooltip)
        actionACPI_Shutdown->setText(QCoreApplication::translate("MainWindow", "ACP&I shutdown", nullptr));
#if QT_CONFIG(tooltip)
        actionACPI_Shutdown->setToolTip(QCoreApplication::translate("MainWindow", "ACPI shutdown", nullptr));
#endif // QT_CONFIG(tooltip)
        actionBegin_trace->setText(QCoreApplication::translate("MainWindow", "Begin trace", nullptr));
#if QT_CONFIG(shortcut)
        actionBegin_trace->setShortcut(QCoreApplication::translate("MainWindow", "Ctrl+T", nullptr));
#endif // QT_CONFIG(shortcut)
        actionEnd_trace->setText(QCoreApplication::translate("MainWindow", "End trace", nullptr));
#if QT_CONFIG(shortcut)
        actionEnd_trace->setShortcut(QCoreApplication::translate("MainWindow", "Ctrl+T", nullptr));
#endif // QT_CONFIG(shortcut)
        actionRenderer_options->setText(QCoreApplication::translate("MainWindow", "Renderer &options...", nullptr));
        actionVulkan->setText(QCoreApplication::translate("MainWindow", "&Vulkan", nullptr));
        actionMCA_devices->setText(QCoreApplication::translate("MainWindow", "&MCA devices...", nullptr));
        actionShow_non_primary_monitors->setText(QCoreApplication::translate("MainWindow", "Show non-&primary monitors", nullptr));
        actionVNC->setText(QCoreApplication::translate("MainWindow", "&VNC", nullptr));
        actionOpen_printer_tray->setText(QCoreApplication::translate("MainWindow", "Open p&rinter tray...", nullptr));
        actionOpen_screenshots_folder->setText(QCoreApplication::translate("MainWindow", "Open screenshots &folder...", nullptr));
        actionApply_fullscreen_stretch_mode_when_maximized->setText(QCoreApplication::translate("MainWindow", "Appl&y fullscreen stretch mode when maximized", nullptr));
        actionCursor_Puck->setText(QCoreApplication::translate("MainWindow", "&Cursor/Puck", nullptr));
        actionPen->setText(QCoreApplication::translate("MainWindow", "&Pen", nullptr));
        actionCGA_composite_settings->setText(QCoreApplication::translate("MainWindow", "&CGA composite settings...", nullptr));
        action_Full_screen_stretch_gl->setText(QCoreApplication::translate("MainWindow", "&Full screen stretch", nullptr));
        action_4_3_gl->setText(QCoreApplication::translate("MainWindow", "&4:3", nullptr));
        action_Square_pixels_keep_ratio_gl->setText(QCoreApplication::translate("MainWindow", "&Square pixels (Keep ratio)", nullptr));
        action_Integer_scale_gl->setText(QCoreApplication::translate("MainWindow", "&Integer scale", nullptr));
        action4_3_Integer_scale_gl->setText(QCoreApplication::translate("MainWindow", "4:&3 Integer scale", nullptr));
        action_1x->setText(QCoreApplication::translate("MainWindow", "&1x", nullptr));
        action_0_5x_2->setText(QCoreApplication::translate("MainWindow", "&0.5x", nullptr));
        action_1x_2->setText(QCoreApplication::translate("MainWindow", "&1x", nullptr));
        action1_5x_2->setText(QCoreApplication::translate("MainWindow", "1.&5x", nullptr));
        action_2x_2->setText(QCoreApplication::translate("MainWindow", "&2x", nullptr));
        action_3x_2->setText(QCoreApplication::translate("MainWindow", "&3x", nullptr));
        action_4x_2->setText(QCoreApplication::translate("MainWindow", "&4x", nullptr));
        action_5x_2->setText(QCoreApplication::translate("MainWindow", "&5x", nullptr));
        action_6x_2->setText(QCoreApplication::translate("MainWindow", "&6x", nullptr));
        action_7x_2->setText(QCoreApplication::translate("MainWindow", "&7x", nullptr));
        action_8x_2->setText(QCoreApplication::translate("MainWindow", "&8x", nullptr));
        menuAction->setTitle(QCoreApplication::translate("MainWindow", "&Action", nullptr));
        menuTablet_tool->setTitle(QCoreApplication::translate("MainWindow", "&Tablet tool", nullptr));
        menuSlow_turbo->setTitle(QCoreApplication::translate("MainWindow", "Cycle Skip", nullptr));
        menuTurbo_batch->setTitle(QCoreApplication::translate("MainWindow", "Turbo Batch", nullptr));
        menuTools->setTitle(QCoreApplication::translate("MainWindow", "&Tools", nullptr));
        menuSound->setTitle(QCoreApplication::translate("MainWindow", "S&ound", nullptr));
        menuView->setTitle(QCoreApplication::translate("MainWindow", "&View", nullptr));
        menuRenderer->setTitle(QCoreApplication::translate("MainWindow", "Re&nderer", nullptr));
        menuWindow_scale_factor->setTitle(QCoreApplication::translate("MainWindow", "&Window scale factor", nullptr));
        menuFilter_method->setTitle(QCoreApplication::translate("MainWindow", "Fi&lter method", nullptr));
        menuFullscreen_stretch_mode->setTitle(QCoreApplication::translate("MainWindow", "Fullscreen &stretch mode", nullptr));
        menuEGA_S_VGA_settings->setTitle(QCoreApplication::translate("MainWindow", "EGA/(S)&VGA settings", nullptr));
        menuVGA_screen_type->setTitle(QCoreApplication::translate("MainWindow", "VGA screen &type", nullptr));
        menuGrayscale_conversion_type->setTitle(QCoreApplication::translate("MainWindow", "Grayscale &conversion type", nullptr));
        menuOpenGL_input_stretch_mode->setTitle(QCoreApplication::translate("MainWindow", "OpenGL input stretch mode", nullptr));
        menuOpenGL_input_scale->setTitle(QCoreApplication::translate("MainWindow", "OpenGL input scale", nullptr));
        menuMedia->setTitle(QCoreApplication::translate("MainWindow", "&Media", nullptr));
        menuAbout->setTitle(QCoreApplication::translate("MainWindow", "&Help", nullptr));
    } // retranslateUi

};

namespace Ui {
    class MainWindow: public Ui_MainWindow {};
} // namespace Ui

QT_END_NAMESPACE

#endif // UI_QT_MAINWINDOW_H
